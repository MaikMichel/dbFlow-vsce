{
	"name": "dbflow",
	"publisher": "MaikMichel",
	"icon": "images/dbflux.png",
	"license": "MIT",
	"repository": {
		"type": "git",
		"url": "https://github.com/MaikMichel/dbFlux"
	},
	"bugs": "https://github.com/MaikMichel/dbFlux/issues",
	"displayName": "dbFlux",
	"description": "Build PL/SQL, Javascript and CSS for your Oracle APEX Instance",
	"version": "5.2.1",
	"engines": {
		"vscode": "^1.82.0"
	},
	"keywords": [
		"plsql",
		"oracle",
		"apex",
		"utplsql"
	],
	"extensionKind": [
		"workspace"
	],
	"preview": false,
	"author": {
		"name": "Maik Michel"
	},
	"categories": [
		"Other"
	],
	"activationEvents": [
		"workspaceContains:build.env",
		"workspaceContains:xcl.yml",
		"onStartupFinished",
		""
	],
	"main": "./out/extension.js",
	"contributes": {
		"snippets": [
			{
				"language": "plsql",
				"path": "./snippets/snippets.json"
			}
		],
		"taskDefinitions": [
			{
				"type": "dbFlux"
			}
		],
		"problemMatchers": [
			{
				"name": "dbflux-plsql",
				"owner": "dbflux",
				"fileLocation": "autoDetect",
				"applyTo": "openDocuments",
				"pattern": [
					{
						"regexp": "(WARNING|ERROR) (.*) (.*?):(\\d+):(\\d+) (.*)$",
						"severity": 1,
						"code": 2,
						"file": 3,
						"line": 4,
						"column": 5,
						"message": 6
					}
				]
			},
			{
				"name": "dbflux-plsql-all",
				"owner": "dbflux",
				"fileLocation": "autoDetect",
				"applyTo": "allDocuments",
				"pattern": [
					{
						"regexp": "(WARNING|ERROR) (.*) (.*?):(\\d+):(\\d+) (.*)$",
						"severity": 1,
						"code": 2,
						"file": 3,
						"line": 4,
						"column": 5,
						"message": 6
					}
				]
			}
		],
		"menus": {
			"commandPalette": [
				{
					"command": "dbflux.showTableDetails.treeview.add_item_context",
					"when": "false"
				},
				{
					"command": "dbflux.showTableDetails.treeview.copy_selection_with_comma",
					"when": "false"
				},
				{
					"command": "dbflux.showTableDetails.treeview.copy_selection_with_semicomma",
					"when": "false"
				},
				{
					"command": "dbflux.showTableDetails.treeview.copy_selection_with_colon",
					"when": "false"
				},
				{
					"command": "dbflux.showTableDetails.treeview.copy_selection_with_colonequal",
					"when": "false"
				},
				{
					"command": "dbflux.showTableDetails.treeview.refresh_items",
					"when": "false"
				},
				{
					"command": "dbflux.showTableDetails.treeview.clear_items",
					"when": "false"
				},
				{
					"command": "dbflux.showTableDetails.treeview.clear_item",
					"when": "false"
				}
			],
			"view/title": [
				{
					"command": "dbflux.dblock.treeview.view_refresh",
					"when": "view == dbflux.dblock.treeview",
					"group": "navigation@0"
				},
				{
					"command": "dbflux.showTableDetails.treeview.refresh_items",
					"when": "view == dbflux.showTableDetails.treeview",
					"group": "navigation@2"
				},
				{
					"command": "dbflux.showTableDetails.treeview.clear_items",
					"when": "view == dbflux.showTableDetails.treeview",
					"group": "navigation@1"
				},
				{
					"command": "dbflux.showTableDetails.treeview.copy_selection_with_comma",
					"when": "view == dbflux.showTableDetails.treeview"
				},
				{
					"command": "dbflux.showTableDetails.treeview.copy_selection_with_semicomma",
					"when": "view == dbflux.showTableDetails.treeview"
				},
				{
					"command": "dbflux.showTableDetails.treeview.copy_selection_with_colon",
					"when": "view == dbflux.showTableDetails.treeview"
				},
				{
					"command": "dbflux.showTableDetails.treeview.copy_selection_with_colonequal",
					"when": "view == dbflux.showTableDetails.treeview"
				},
				{
					"command": "dbflux.showTableDetails.treeview.add_item",
					"when": "view == dbflux.showTableDetails.treeview",
					"group": "navigation@0"
				}
			],
			"view/item/context": [
				{
					"command": "dbflux.showTableDetails.treeview.clear_item",
					"when": "view == dbflux.showTableDetails.treeview && viewItem == table",
					"group": "inline"
				},
				{
					"command": "dbflux.showTableDetails.treeview.copy_selection_with_comma",
					"when": "view == dbflux.showTableDetails.treeview",
					"group": "first"
				},
				{
					"command": "dbflux.showTableDetails.treeview.copy_selection_with_semicomma",
					"when": "view == dbflux.showTableDetails.treeview",
					"group": "first"
				},
				{
					"command": "dbflux.showTableDetails.treeview.copy_selection_with_colon",
					"when": "view == dbflux.showTableDetails.treeview",
					"group": "first"
				},
				{
					"command": "dbflux.showTableDetails.treeview.copy_selection_with_colonequal",
					"when": "view == dbflux.showTableDetails.treeview",
					"group": "first"
				}
			]
		},
		"viewsWelcome": [
			{
				"view": "dbflux.showTableDetails.treeview",
				"contents": "No tables have been added yet. [learn more](https://github.com/MaikMichel/dbFlux#dbstruct---view-table-structure).\n[Add Table](command:dbflux.showTableDetails.treeview.add_item)"
			},
			{
				"view": "dbflux.dblock.treeview",
				"contents": "No locked files have been found. [learn more](https://github.com/MaikMichel/dbFlux#lock-and-unlock-files).\n[Lock current file](command:dbFlux.lockCurrentFile)"
			}
		],
		"views": {
			"explorer": [
				{
					"id": "dbflux.dblock.treeview",
					"name": "dbLock - locked files by user",
					"when": "dbLockEnabled"
				},
				{
					"id": "dbflux.showTableDetails.treeview",
					"name": "dbStruct - column viewer"
				}
			]
		},
		"commands": [
			{
				"command": "dbflux.dblock.treeview.item_clicked",
				"title": "cwt tree view item"
			},
			{
				"command": "dbflux.dblock.treeview.view_refresh",
				"title": "refresh",
				"icon": "$(refresh)"
			},
			{
				"command": "dbflux.showTableDetails.treeview.add_item",
				"title": "Add Table to Column-Viewer",
				"category": "dbFlux",
				"enablement": "inDbFlowProject",
				"icon": "$(add)"
			},
			{
				"command": "dbflux.showTableDetails.treeview.add_item_context",
				"title": "Add Table to Column-Viewer",
				"category": "dbFlux",
				"enablement": "inDbFlowProject",
				"icon": "$(add)"
			},
			{
				"command": "dbflux.showTableDetails.treeview.copy_selection_with_comma",
				"title": "Copy using ','",
				"category": "dbFlux",
				"enablement": "inDbFlowProject"
			},
			{
				"command": "dbflux.showTableDetails.treeview.copy_selection_with_semicomma",
				"title": "Copy using ';'",
				"category": "dbFlux",
				"enablement": "inDbFlowProject"
			},
			{
				"command": "dbflux.showTableDetails.treeview.copy_selection_with_colon",
				"title": "Copy using ':'",
				"category": "dbFlux",
				"enablement": "inDbFlowProject"
			},
			{
				"command": "dbflux.showTableDetails.treeview.copy_selection_with_colonequal",
				"title": "Copy using ':='",
				"category": "dbFlux",
				"enablement": "inDbFlowProject"
			},
			{
				"command": "dbflux.showTableDetails.addColumnSnippet",
				"title": "Add Column-Snippet",
				"category": "dbFlux",
				"enablement": "inDbFlowProject"
			},
			{
				"command": "dbflux.showTableDetails.treeview.clear_items",
				"title": "Remove all tables from view",
				"icon": "$(clear-all)"
			},
			{
				"command": "dbflux.showTableDetails.treeview.clear_item",
				"title": "Remove selected table from view",
				"icon": "$(close)"
			},
			{
				"command": "dbflux.showTableDetails.treeview.refresh_items",
				"title": "Refresh all tables",
				"icon": "$(refresh)"
			},
			{
				"command": "dbFlux.initializeProject",
				"title": "Initialize Project structure (dbFlux)",
				"category": "dbFlux"
			},
			{
				"command": "dbFlux.initialize.dbFlow.Project",
				"title": "Initialize Project structure (dbFlow)",
				"category": "dbFlux"
			},
			{
				"command": "dbFlux.addFeatureSet",
				"title": "Add FeatureSet as SubModule",
				"category": "dbFlux",
				"enablement": "inDbFlowProject"
			},
			{
				"command": "dbFlux.syncFeatureSet",
				"title": "Sync FeatureSet from SubModule",
				"category": "dbFlux",
				"enablement": "inDbFlowProject"
			},
			{
				"command": "dbFlux.splitToFiles",
				"title": "Split File",
				"category": "dbFlux",
				"enablement": "inDbFlowProject"
			},
			{
				"command": "dbFlux.joinFiles",
				"title": "Join Files",
				"category": "dbFlux",
				"enablement": "inDbFlowProject"
			},
			{
				"command": "dbFlux.reverseBuildFromFiles",
				"title": "Scan for dependent files",
				"category": "dbFlux",
				"enablement": "inDbFlowProject && resourceDirname =~ /^.*db.*tables$/"
			},
			{
				"command": "dbFlux.createObjectWizard",
				"title": "Create Object",
				"category": "dbFlux",
				"enablement": "inDbFlowProject"
			},
			{
				"command": "dbFlux.createTableDDL",
				"title": "Create TableDDL File",
				"category": "dbFlux",
				"enablement": "inDbFlowProject"
			},
			{
				"command": "dbFlux.createObjectTypeSnippet",
				"title": "Create ObjectType Snippet",
				"category": "dbFlux",
				"enablement": "inDbFlowProject"
			},
			{
				"command": "dbFlux.removeConfiguration",
				"title": "Remove dbFlux configuration from workspace",
				"category": "dbFlux",
				"enablement": "inDbFlowProject && isDBFluxMode"
			},
			{
				"command": "dbFlux.compileFile",
				"title": "Compile current File",
				"category": "dbFlux",
				"enablement": "inDbFlowProject"
			},
			{
				"command": "dbFlux.runTriggerForCurrentFile",
				"title": "Run trigger for current File",
				"category": "dbFlux",
				"enablement": "inDbFlowProject"
			},
			{
				"command": "dbFlux.compileSchemas",
				"title": "Compile selected Schemas",
				"category": "dbFlux",
				"enablement": "inDbFlowProject"
			},
			{
				"command": "dbFlux.exportAPEX",
				"title": "Export APEX Application",
				"category": "dbFlux",
				"enablement": "inDbFlowProject"
			},
			{
				"command": "dbFlux.exportREST",
				"title": "Export REST Module",
				"category": "dbFlux",
				"enablement": "inDbFlowProject"
			},
			{
				"command": "dbFlux.addREST",
				"title": "Add REST Module",
				"category": "dbFlux",
				"enablement": "inDbFlowProject"
			},
			{
				"command": "dbFlux.addAPP",
				"title": "Add APEX Application",
				"category": "dbFlux",
				"enablement": "inDbFlowProject"
			},
			{
				"command": "dbFlux.addWorkspace",
				"title": "Add Workspace",
				"category": "dbFlux",
				"enablement": "inDbFlowProject && isDbFlowFlexMode"
			},
			{
				"command": "dbFlux.addSchema",
				"title": "Add Schema",
				"category": "dbFlux",
				"enablement": "inDbFlowProject && isDbFlowFlexMode"
			},
			{
				"command": "dbFlux.enableFlexMode",
				"title": "Enable FlexMode",
				"category": "dbFlux",
				"enablement": "inDbFlowProject && !isDbFlowFlexMode"
			},
			{
				"command": "dbFlux.addStaticFolder",
				"title": "Add APEX static folder",
				"category": "dbFlux",
				"enablement": "inDbFlowProject"
			},
			{
				"command": "dbFlux.exportSchema",
				"title": "Export DB Schema into Folder",
				"category": "dbFlux",
				"enablement": "inDbFlowProject"
			},
			{
				"command": "dbFlux.exportObject",
				"title": "Export DB Object (current)",
				"category": "dbFlux",
				"enablement": "inDbFlowProject && resourceDirname =~ /^.*(\\\\|\\/)db(\\\\|\\/).*$/"
			},
			{
				"command": "dbFlux.exportStaticFiles",
				"title": "Export Static Application Files",
				"category": "dbFlux",
				"enablement": "inDbFlowProject"
			},
			{
				"command": "dbFlux.removeCurrentStaticFile",
				"title": "Remove Static Application File (current)",
				"category": "dbFlux",
				"enablement": "inDbFlowProject && resourceDirname =~ /^.*(\\\\|\\/)static(\\\\|\\/).*$/"
			},
			{
				"command": "dbFlux.exportCurrentStaticFile",
				"title": "Export Static Application File (current)",
				"category": "dbFlux",
				"enablement": "inDbFlowProject && resourceDirname =~ /^.*(\\\\|\\/)static(\\\\|\\/).*$/"
			},
			{
				"command": "dbFlux.exportCurrentTableAsJSONDefinition",
				"title": "Export Table as JSON (current)",
				"category": "dbFlux",
				"enablement": "inDbFlowProject && resourceDirname =~ /^.*db.*(tables|tables(\\\\|\\/)tables_ddl)$/"
			},
			{
				"command": "dbFlux.addReportFolder",
				"title": "Add REPORT type",
				"category": "dbFlux",
				"enablement": "inDbFlowProject"
			},
			{
				"command": "dbFlux.addHookFile",
				"title": "Add .hook file",
				"category": "dbFlux",
				"enablement": "inDbFlowProject"
			},
			{
				"command": "dbFlux.executeTests",
				"title": "Execute utPLSQL tests",
				"category": "dbFlux",
				"enablement": "inDbFlowProject"
			},
			{
				"command": "dbFlux.executeTestPackage",
				"title": "Execute utPLSQL test with current Package",
				"category": "dbFlux",
				"enablement": "inDbFlowProject && resourceDirname =~ /^.*[/|\\\\]db[/|\\\\].*[/|\\\\]tests[/|\\\\]packages$/"
			},
			{
				"command": "dbFlux.executeTestPackageWithCodeCoverage",
				"title": "Execute utPLSQL code coverage for current Package",
				"category": "dbFlux",
				"enablement": "inDbFlowProject && resourceDirname =~ /^.*[/|\\\\]db[/|\\\\].*[/|\\\\]tests[/|\\\\]packages$/"
			},
			{
				"command": "dbFlux.resetPassword",
				"title": "Reset password",
				"category": "dbFlux",
				"enablement": "inDbFlowProject"
			},
			{
				"command": "dbFlux.openSpecOrBody",
				"title": "Open corresponding Spec or Body",
				"category": "dbFlux",
				"enablement": "inDbFlowProject && resourceExtname  =~ /.[pks|pkb|tps|tpb]$/"
			},
			{
				"command": "dbFlux.copySelectionWithFilenameToClipBoard",
				"title": "Write package name.selection to ClipBoard",
				"category": "dbFlux",
				"enablement": "inDbFlowProject && resourceExtname  =~ /.[pks|pkb|tps|tpb|sql]$/"
			},
			{
				"command": "dbFlux.wrapLogSelection",
				"title": "Wrap Selection with Logging Method",
				"category": "dbFlux",
				"enablement": "editorTextFocus && editorHasSelection"
			},
			{
				"command": "dbFlux.wrapLogSelection.down",
				"title": "Wrap Selection with Logging Method",
				"category": "dbFlux",
				"enablement": "editorTextFocus && editorHasSelection"
			},
			{
				"command": "dbFlux.wrapLogSelection.up",
				"title": "Wrap Selection with Logging Method",
				"category": "dbFlux",
				"enablement": "editorTextFocus && editorHasSelection"
			},
			{
				"command": "dbFlux.gotoToFolder",
				"title": "Goto folder",
				"category": "dbFlux",
				"enablement": "inDbFlowProject"
			},
			{
				"command": "dbFlux.lockCurrentFile",
				"title": "Lock current File",
				"category": "dbFlux",
				"enablement": "inDbFlowProject && dbLockEnabled && resourceDirname =~ /^.*(\\\\|\\/)(db|static)(\\\\|\\/).*$/"
			},
			{
				"command": "dbFlux.unlockCurrentFile",
				"title": "Unlock current File",
				"category": "dbFlux",
				"enablement": "inDbFlowProject && dbLockEnabled && resourceDirname =~ /^.*(\\\\|\\/)(db|static)(\\\\|\\/).*$/"
			},
			{
				"command": "dbFlux.refreshLockedFiles",
				"title": "Refresh locked state of files",
				"category": "dbFlux",
				"enablement": "inDbFlowProject && dbLockEnabled"
			},
			{
				"command": "dbFlux.run.SQLcl",
				"title": "Run SQLcl",
				"category": "dbFlux",
				"enablement": "inDbFlowProject"
			},
			{
				"command": "dbFlux.run.SQLplus",
				"title": "Run SQL+",
				"category": "dbFlux",
				"enablement": "inDbFlowProject"
			},
			{
				"command": "dbFlux.convert.to.dbFlow",
				"title": "Convert Project to dbFlow - Project",
				"category": "dbFlux",
				"enablement": "inDbFlowProject && isDBFluxMode"
			}
		],
		"keybindings": [
			{
				"command": "dbflux.showTableDetails.treeview.add_item_context",
				"when": "inDbFlowProject",
				"key": "ctrl+shift+t"
			},
			{
				"command": "dbFlux.gotoToFolder",
				"key": "ctrl+alt+g"
			},
			{
				"command": "dbFlux.wrapLogSelection",
				"key": "ctrl+alt+w ctrl+alt+w",
				"when": "editorTextFocus && editorHasSelection"
			},
			{
				"command": "dbFlux.wrapLogSelection.down",
				"key": "ctrl+alt+w ctrl+alt+down",
				"when": "editorTextFocus && editorHasSelection"
			},
			{
				"command": "dbFlux.wrapLogSelection.up",
				"key": "ctrl+alt+w ctrl+alt+up",
				"when": "editorTextFocus && editorHasSelection"
			},
			{
				"command": "dbFlux.openSpecOrBody",
				"key": "ctrl+alt+o",
				"mac": "ctrl+alt+o",
				"when": "inDbFlowProject && resourceExtname  =~ /.[pks|pkb|tps|tpb]$/"
			},
			{
				"command": "dbFlux.copySelectionWithFilenameToClipBoard",
				"key": "ctrl+alt+a",
				"mac": "ctrl+alt+a",
				"when": "inDbFlowProject && resourceExtname  =~ /.[pks|pkb|tps|tpb|sql]$/"
			},
			{
				"command": "dbFlux.compileSchemas",
				"key": "shift+alt+b",
				"mac": "shift+alt+b",
				"when": "inDbFlowProject"
			},
			{
				"command": "dbFlux.splitToFiles",
				"key": "ctrl+alt+s",
				"mac": "ctrl+alt+s",
				"when": "inDbFlowProject"
			},
			{
				"command": "dbFlux.joinFiles",
				"key": "ctrl+alt+j",
				"mac": "ctrl+alt+j",
				"when": "inDbFlowProject"
			},
			{
				"command": "dbFlux.createObjectWizard",
				"key": "ctrl+alt+c",
				"mac": "ctrl+alt+c",
				"when": "inDbFlowProject"
			},
			{
				"command": "dbFlux.createTableDDL",
				"key": "ctrl+alt+d",
				"mac": "ctrl+alt+d",
				"when": "inDbFlowProject"
			},
			{
				"command": "dbFlux.compileFile",
				"key": "ctrl+alt+b",
				"mac": "ctrl+alt+b",
				"when": "inDbFlowProject"
			},
			{
				"command": "dbFlux.executeTestPackage",
				"key": "ctrl+alt+t",
				"mac": "ctrl+alt+t",
				"when": "inDbFlowProject"
			},
			{
				"command": "dbFlux.executeTestPackageWithCodeCoverage",
				"key": "ctrl+alt+shift+t",
				"mac": "ctrl+alt+shift+t",
				"when": "inDbFlowProject"
			},
			{
				"command": "dbFlux.exportAPEX",
				"key": "ctrl+alt+e",
				"mac": "ctrl+alt+e",
				"when": "inDbFlowProject"
			},
			{
				"command": "dbFlux.exportREST",
				"key": "ctrl+alt+r",
				"mac": "ctrl+alt+r",
				"when": "inDbFlowProject"
			}
		],
		"configuration": [
			{
				"type": "object",
				"title": "dbFlux",
				"properties": {
					"dbFlux.loggingMode": {
						"type": "string",
						"default": "INFO",
						"enum": [
							"DEBUG",
							"INFO",
							"WARN",
							"ERROR",
							"NONE"
						],
						"description": "Select Logging Level. Open Output Panel and select dbFlux to view the output",
						"scope": "window"
					},
					"dbFlux.cliToUseForCompilation": {
						"type": "string",
						"default": "SQL*Plus",
						"enum": [
							"SQL*Plus",
							"SQLcl"
						],
						"description": "Which CLI should be used to compile your source to specified database. Please make sure to set binaries to path",
						"scope": "window"
					},
					"dbFlux.configCLI.UseSQLplusSPERRORLOGTable": {
						"type": "boolean",
						"default": false,
						"description": "Use `set errorlogging on` to log errors during compiliation. Keep in mind, that this will create then table SPERRORLOG in your scheme(s)!",
						"scope": "window"
					},
					"dbFlux.exportApplications.AppendFollowingOptionString": {
						"type": "string",
						"default": "",
						"markdownDescription": "Add addional options and arguments to `apex export` command, send to SQLcl\n\n```apex export -applicationid ${APP_ID} -split -skipExportDate ${YOUR_OPTIONS}``` \n\n For Example: \n- `-debug`\n- `-exptype APPLICTATION_SOURCE,READABLE_YAML",
						"scope": "window"
					},
					"dbFlux.showWarningMessages.FocusProblemPanelWhenExists": {
						"type": "boolean",
						"default": true,
						"description": "If problems occure after compiling, this panel get's the focus",
						"scope": "window"
					},
					"dbFlux.showWarningMessages.AfterCompilation": {
						"type": "boolean",
						"default": false,
						"description": "If set to true additional output concerning warning messages is rendered to output",
						"scope": "window"
					},
					"dbFlux.showWarningMessages.AfterCompilationExcludingFollowingCodes": {
						"type": "array",
						"default": [
							"5018",
							"7203",
							"6009",
							"6010",
							"7204",
							"6023"
						],
						"description": "Warning Codes to exclude. These values will have an effect only when Show Warning Messages is set to true",
						"scope": "window"
					},
					"dbFlux.showWarningMessages.showWarningsAndErrorsWithColoredOutput": {
						"type": "boolean",
						"default": true,
						"description": "Enables colored output from SQL(plus/cl) output",
						"scope": "window"
					},
					"dbFlux.customTriggerRuns": {
						"type": "array",
						"items": {
							"type": "object",
							"title": "run config",
							"properties": {
								"triggeringExpression": {
									"type": "string",
									"description": "whenever a file is compiled matching that regex"
								},
								"runFile": {
									"type": "string",
									"description": "SQL/PLSQL file to run. the triggering file will be the first parameter"
								},
								"runFileParameters": {
									"type": "array",
									"description": "Parameters to pass to SQL/PLSQL file"
								}
							}
						},
						"description": "Define regex to run files after you compile a file",
						"scope": "window"
					},
					"dbFlux.customTriggerCalls": {
						"type": "array",
						"items": {
							"type": "object",
							"title": "run config",
							"properties": {
								"triggeringExpression": {
									"type": "string",
									"description": "whenever a file is compiled matching that regex"
								},
								"runMethod": {
									"type": "string",
									"description": "Method to call to write return clob value to file. Method must have following signature: method_name(p_file_name in varchar2) return clob"
								},
								"runMethodTargetFile": {
									"type": "string",
									"description": "target filename return value is written to. this file will also be run afterwards"
								}
							}
						},
						"description": "Define regex to run files after you compile a file",
						"scope": "window"
					},
					"dbFlux.javaScriptModification.createAndUploadJavascriptMinifiedVersion": {
						"type": "boolean",
						"default": true,
						"description": "Create a minified version of your JavaScript file",
						"scope": "window"
					},
					"dbFlux.javaScriptModification.createAndUploadJavascriptSourceMap": {
						"type": "boolean",
						"default": true,
						"description": "Create a source map of your minified JavaScript file",
						"scope": "window"
					},
					"dbFlux.cssModification.createAndUploadCSSMinifiedVersion": {
						"type": "boolean",
						"default": true,
						"description": "Create a minified version of your CSS file",
						"scope": "window"
					},
					"dbFlux.extensionsWhichShouldBeHandeldBySqlCli": {
						"type": "array",
						"default": [
							"sql",
							"pks",
							"pkb",
							"tps",
							"tpb",
							"prc",
							"fnc"
						],
						"description": "File-Extension dbFlux can compile by using either SQLPlus or SQLcl",
						"scope": "window"
					},
					"dbFlux.languageBasedLogWrappers": {
						"type": "object",
						"default": {
							"javascript": "console.log('$LBL', $VAR);",
							"typescript": "console.log('$LBL', $VAR);",
							"plsql": "logger.log('$LBL: ' || $VAR, l_scope);",
							"bash": "echo \"$LBL: $$VAR\"",
							"shellscript": "echo \"$LBL: $$VAR\""
						},
						"description": "Define a logging wrapper based on editor language. ex.: console.log('$LBL', $VAR);"
					},
					"dbFlux.dbLock.RestAPIEnabled": {
						"type": "boolean",
						"default": false,
						"markdownDescription": "Activate to enable dbLock feature",
						"scope": "window"
					},
					"dbFlux.dbLock.RestAPIUrl": {
						"type": "string",
						"markdownDescription": "Enter the URL to dbLock REST Endpoint. <br/>For example: (http://localhost:8080/ords/dblock) without trailing slash. <br/>You can download and install an ORDS implementation at Github: (https://github.com/MaikMichel/dbLock)",
						"scope": "window"
					},
					"dbFlux.dbLock.RestAPIToken": {
						"type": "string",
						"markdownDescription": "Token/Mandant identification. (Displayed during installation of dbLock)",
						"scope": "window"
					},
					"dbFlux.test.Output.Format": {
						"type": "string",
						"default": "ANSI Console",
						"enum": [
							"ANSI Console",
							"HTML Report"
						],
						"description": "Which output format should be used to report utPLSQL Results",
						"scope": "window"
					},
					"dbFlux.showTableDetails.DragSelectionWith": {
						"type": "string",
						"default": ", ",
						"enum": [
							", ",
							";\n",
							":",
							" := \n"
						],
						"markdownDescription": "Choose which String to use as when dragging table or columns into editor per default? <br/> You can alway choose to copy by context menu on the items",
						"scope": "window"
					}
				}
			}
		],
		"colors": [
			{
				"id": "dbFLow.lockedByYouFileBackground",
				"description": "Specifies the background color of a locked file by you",
				"defaults": {
					"dark": "#ecc903",
					"light": "#0000000C",
					"highContrast": "#FFFFFF13"
				}
			},
			{
				"id": "dbFLow.lockedFileBackground",
				"description": "Specifies the background color of a locked file",
				"defaults": {
					"dark": "#fb7229",
					"light": "#0000000C",
					"highContrast": "#FFFFFF13"
				}
			}
		]
	},
	"scripts": {
		"compile": "tsc -p ./",
		"watch": "tsc -watch -p ./",
		"pretest": "npm run compile && npm run lint",
		"lint": "eslint src --ext ts",
		"test": "node ./out/test/runTest.js",
		"vscode:prepublish": "npm run -S esbuild-base -- --minify",
		"esbuild-base": "esbuild ./src/extension.ts --bundle --outfile=out/main.js --external:vscode --format=cjs --platform=node",
		"esbuild": "npm run -S esbuild-base -- --sourcemap",
		"esbuild-watch": "npm run -S esbuild-base -- --sourcemap --watch",
		"test-compile": "tsc -p ./"
	},
	"devDependencies": {
		"@types/fs-extra": "^9.0.13",
		"@types/glob": "^7.1.3",
		"@types/mocha": "^8.0.4",
		"@types/node": "^12.11.7",
		"@types/vscode": "^1.55.0",
		"@typescript-eslint/eslint-plugin": "^4.14.1",
		"@typescript-eslint/parser": "^4.14.1",
		"@vscode/test-electron": "^1.6.0",
		"esbuild": "^0.11.23",
		"eslint": "^7.19.0",
		"glob": "^7.1.6",
		"mocha": "^9.2.0",
		"typescript": "^4.1.3"
	},
	"dependencies": {
		"@types/node-fetch": "^2.6.2",
		"@types/xml2js": "^0.4.11",
		"ansi-to-html": "^0.7.2",
		"dotenv": "^8.2.0",
		"fs-extra": "^10.0.0",
		"handlebars": "^4.7.7",
		"junit2json": "^3.1.1",
		"node-fetch": "^2.6.7",
		"terser": "^5.6.1",
		"uglifycss": "0.0.29",
		"which": "^2.0.2",
		"xml2js": "^0.6.0",
		"yaml": "^1.10.2"
	}
}
